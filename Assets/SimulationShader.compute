// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CalculateVelocity
#pragma kernel ApplyVelocity
#define maxTypes 32
#define particleBorder 0.5

struct Atom {
    int type;
    float2 position;
    float2 velocity;
};

RWStructuredBuffer<Atom> atoms;
float time;
 
int typeCount;
float typesLength[maxTypes * maxTypes];
float typesStrength[maxTypes * maxTypes];

float friction;

float width;
float height;

float2 calculateAttraction(Atom atom1, Atom atom2) {
    float dx = atom1.position.x - atom2.position.x;
    if (dx > width / 2.0) {
        dx = dx - width;
    }
    else if (-dx > width / 2.0) {
        dx = width + dx;
    }
    float dy = atom1.position.y - atom2.position.y;
    if (dy > height / 2.0) {
        dy = dy - height;
    }
    else if (-dy > height / 2.0) {
        dy = height + dy;
    }

    float2 diff = float2(dx, dy);
    float l = length(diff);
    
    float length = typesLength[atom1.type * typeCount + atom2.type];
    float strength = typesStrength[atom1.type * typeCount + atom2.type];

    float attr = 0;

    if (l < particleBorder) {
        attr = (1/particleBorder) - (particleBorder / (l*l));
    }
    else if (l > 0.25) {
        float le = length - (l - particleBorder);
        if (le < 0) {
            attr = strength * min((length - le), 0);
        }
        else if (le > 0) {
            attr = strength * le / length;
        }
    }
    float2 res = float2(-diff.x * attr, -diff.y * attr);
    return res;
}

[numthreads(32,1,1)]
void CalculateVelocity (uint3 id : SV_DispatchThreadID)
{
    Atom atom = atoms[id.x];

    float2 force = float2(0, 0);
    for (unsigned int i = 0, ilen = atoms.Length; i < ilen; i++) {
        if (i != id.x) {
            force += calculateAttraction(atom, atoms[i]);
        }
    }

    atom.velocity = float2((atom.velocity.x + force.x * time) * friction, (atom.velocity.y + force.y * time) * friction);
    atoms[id.x] = atom;
}

[numthreads(32, 1, 1)]
void ApplyVelocity(uint3 id : SV_DispatchThreadID)
{
    Atom atom = atoms[id.x];

    float2 newPos = atom.position + atom.velocity * time;
    if (newPos.x < 0) {
        newPos.x += width;
    }
    if (newPos.x > width) {
        newPos.x -= width;
    }
    if (newPos.y < 0) {
        newPos.y += height;
    }
    if (newPos.y > height) {
        newPos.y -= height;
    }
    
    atom.position = newPos;
    atoms[id.x] = atom;

}